<?php

namespace App\Models\Export;

use Exception;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Storage;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class CollectionExporter
{
    /**
     * Export collection.
     *
     * @param Collection $data
     * @param $title
     * @param string[] $options
     * @return string
     */
    public static function simpleExportToExcel(Collection $data, $title, $options = [])
    {
        $defaultExportPath = 'exports/temp/' . $title . '-' . date('YmdHis') . '.xlsx';
        $disk = key_exists('disk', $options) ? $options['disk'] : 'local';
        $storeTo = key_exists('storeTo', $options) ? $options['storeTo'] : $defaultExportPath;
        $excludes = key_exists('excludes', $options) ? $options['excludes'] : [];

        $spreadsheet = new Spreadsheet();
        $spreadsheet->getProperties()
            ->setCreator(config('app.name'))
            ->setLastModifiedBy(config('app.name'))
            ->setTitle($title)
            ->setSubject('Data export: ' . $title)
            ->setDescription('Data export generated by: ' . config('app.name'));

        $excelWriter = new Xlsx($spreadsheet);

        try {
            $spreadsheet->setActiveSheetIndex(0);
            $activeSheet = $spreadsheet->getActiveSheet();

            $activeSheet->setCellValue('A1', $title)
                ->getStyle('A1')
                ->getFont()
                ->setBold(true);

            $header = collect([]);
            $dataCells = collect([]);
            if ($data->isNotEmpty()) {
                $header = collect($data->first())->filter(function ($itemData) {
                    return !is_array($itemData);
                });
                $header = $header->keys();
                $header = $header->map(function ($title) {
                    return strtoupper(str_replace(['_', '-'], ' ', $title));
                });

                $dataCells = $data->map(function ($item) use ($excludes) {
                    $itemCell = [];
                    foreach ($item->toArray() as $key => $val) {
                        if (!in_array($key, $excludes) && !is_array($val)) {
                            $itemCell[$key] = $val;
                        }
                    }

                    return collect($itemCell);
                });
            }

            $activeSheet->fromArray($header->toArray(), null, 'A1');
            $activeSheet->fromArray($dataCells->toArray(), null, 'A2');
            $columnIterator = $spreadsheet->getActiveSheet()->getColumnIterator();
            foreach ($columnIterator as $column) {
                $spreadsheet->getActiveSheet()
                    ->getColumnDimension($column->getColumnIndex())
                    ->setAutoSize(true);

                $spreadsheet->getActiveSheet()
                    ->getStyle($column->getColumnIndex() . '1')
                    ->applyFromArray([
                            'fill' => [
                                'fillType' => Fill::FILL_SOLID,
                                'color' => ['rgb' => '000000']
                            ],
                            'font' => [
                                'bold' => true,
                                'color' => ['rgb' => 'FFFFFF']
                            ]
                        ]
                    );
            }

            if (!empty($data)) {
                $activeSheet->setAutoFilterByColumnAndRow(1, 1, $header->count(), 1);
            }

            ob_start();
            $excelWriter->save('php://output');
            $content = ob_get_contents();
            ob_end_clean();

            Storage::disk($disk)->put($storeTo, $content);

            return $defaultExportPath;
        } catch (Exception $e) {
            return $e->getMessage();
        }
    }
}
